generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   orders    Order[]
// }

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  subCategories SubCategory[]
  brands        Brand[]
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int            @default(0)
  rating        Float          @default(0.0)
  categoryId    Int
  subCategoryId Int?
  brandId       Int?
  category      Category       @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory?   @relation(fields: [subCategoryId], references: [id])
  brand         Brand?         @relation(fields: [brandId], references: [id])
  images        ProductImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String   @unique
  type      String   @default("detail") // "thumbnail" or "detail"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

// model Order {
//   id            Int                  @id @default(autoincrement())
//   userId        Int
//   status        String
//   totalAmount   Float
//   user          User                 @relation(fields: [userId], references: [id])
//   items         OrderItem[]
//   payments      Payment[]
//   statusHistory OrderStatusHistory[]
//   createdAt     DateTime             @default(now())
//   updatedAt     DateTime             @updatedAt
// }

// model OrderItem {
//   id        Int      @id @default(autoincrement())
//   orderId   Int
//   productId Int
//   quantity  Int      @default(1)
//   price     Float
//   order     Order    @relation(fields: [orderId], references: [id])
//   product   Product  @relation(fields: [productId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Payment {
//   id            Int      @id @default(autoincrement())
//   orderId       Int
//   amount        Float
//   status        String
//   paymentMethod String
//   order         Order    @relation(fields: [orderId], references: [id])
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model OrderStatusHistory {
//   id        Int      @id @default(autoincrement())
//   orderId   Int
//   status    String
//   order     Order    @relation(fields: [orderId], references: [id])
//   createdAt DateTime @default(now())
// }
