generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(CUSTOMER)

  orders    Order[]
  blogs     Blog[]
  reviews   Review[]
  createdAt DateTime @default(now())
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Category Model
model Category {
  id       String  @id @default(uuid())
  name     String
  description String?
  parentId String?

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  createdAt DateTime @default(now())
}

// Brand Model
model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  description String?
  products  Product[]
  createdAt DateTime  @default(now())
}

// Product Model
model Product {
  id         String  @id @default(uuid())
  name       String
  description String?
  price      Decimal
  thumbnail  String 
  categoryId String
  brandId    String
  stock      Int

  category   Category    @relation(fields: [categoryId], references: [id])
  brand      Brand?      @relation(fields: [brandId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]

  createdAt DateTime @default(now())
}

// Order Model
model Order {
  id     String      @id @default(uuid())
  userId String
  total  Decimal
  status OrderStatus @default(PENDING)

  paymentMethod PaymentMethod @default(COD)
  paymentStatus PaymentStatus @default(PENDING)

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  voucher     Voucher?     @relation(fields: [voucherId], references: [id])

  createdAt DateTime @default(now())
  voucherId  String?
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  PAYPAL
  MOMO
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum VoucherType {
  PERCENT
  FIXED
}

// OrderItem Model
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

// Voucher Model
model Voucher {
  id       String   @id @default(uuid())
  code     String   @unique
  discountPercent Decimal
  maxDiscount Decimal
  type VoucherType
  startDate   DateTime
  endDate     DateTime
  usedLeft Int
  isActive Boolean  @default(true)

  orders    Order[]
  createdAt DateTime @default(now())
}

model Blog {
  id        String  @id @default(uuid())
  title     String
  content   String
  thumbnail String?
  userId  String

  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// Review Model
model Review {
  id        String  @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

// -- Reset database --
// npx prisma migrate reset
// npx prisma migrate dev --name init
// npx prisma generate